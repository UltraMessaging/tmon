/*! 

<br/><br/><br/>
<center class="mytitle">TMON: UM TOPIC MONITOR</center>
<center>Copyright (C) 2020 Informatica</center>
<br/><br/><br/>
\mainpage TMON: UM TOPIC MONITOR

Project home:
https://github.com/UltraMessaging/tmon

See \ref disclaimers for licensing.

Next up: \ref overview

\page overview Overview

The "tmon" package is an API wrapper around the Ultra Messaging library that
provides topic-level event monitoring.
This is intended to work along with the standard UM "automatic monitoring".

Users must add calls to the tmon API to their applications at specific points.

\n \section suppliedassourcecode Supplied as Source Code

The "tmon" package is provided in source code form at the
[Ultra Messaging GitHub](https://github.com/UltraMessaging).

Note that tmon is not officially part of the UM product family.
This implementation of tmon should be considered "example" code,
to be incorporated into users' application and modified to meet
each user's local requirements.
If those modifications are reasonably general,
the user is invited to submit "pull" requests on GitHub.
Informatica will review the proposed changes and will usually accept the
pull request, incorporating the improvements.

Additionally, Informatica is committed to fixing bugs.
Please raise issues using the standard GitHub issue tracking functionality,
or through the normal Informatica support organization.

In other words, although tmon is not officially part of the UM product family,
Informatical intends to support it.
However, we don't currently plan to include tmon as part of the product package.

Finally, be aware that:
<ul>
<li>Informatica does not include tmon in its QA testing.
Note, however, that tmon includes a basic automated self-test.

<li>Informatica does not guarantee that future UM development will
be compatible with tmon.
</ul>

Naturally, the amount of effort we invest in tmon will be proportional to
the level of user interest.
If you decide to use tmon, please let us know through the support organization!
We will keep you informed of the package's continued evolution.


\n \section features Features

<ul>
<li>Provide information by which a centralized monitoring tool can
detect connectivity problems such as deafness or loss.

<li>Provide information to identify the producers and consumers of
topics.
</ul>

The primary focus of the tmon package is on applications.
The application calls tmon APIs to inform the monitoring tool of
significant events, like the creation of sources and receivers,
as well as important events in a receiver's life cycle.

Tmon's event-driven approach is different from the standard
UM automatic monitoring approach where satistical data
is accumulated and reported periodically.
Tmon reports individual events on timeframes driven
by the occurrence of those events.
The intent is that both forms of monitoring data are
valuable to the successful operation and
troubleshooting of a UM network.

The expectation is that users will write their own monitoring tools
that receives these events,
as well as UM's traditional automatic monitoring data,
to track the health of their sources and receivers.
This package does not contain sophisticated monitoring and tracking
functionality.
Only a simple example tool is provided that prints the tmon events
and traditional UM monitoring data.
It is the user's responsibility to write the code required to draw
conclusions from the data.

\page userguide User Guide

There are two sets of APIs in the tmon software:
user application APIs and monitoring tool APIs.
The user application APIs let the application
inform tmon when significant events happen.
The monitoring tool APIs that assist in the
reception and parsing of the tmon events
sent by the application.

\n \section userapplicationapis User Application APIs

There are four types of tmon objects,
each one of which monitors a corresponding type
of UM object:
<ul>
<li>\ref tmon_ctx_s "tmon_ctx_t" - object associated with
an application UM context object.
Typically an application has a single UM context,
but can sometimes have more than one.
Applications also create the same number of
tmon_t objects.
<li>\ref tmon_src_s "tmon_src_s" - object associated with
an application UM source object.
Applications that create source objects under a
context object,
also create the same number of tmon_src_t
objects under the corresponding tmon_t object.
<li>\ref tmon_rcv_s "tmon_rcv_t" - object associated with
an application UM receiver or wildcard receiver object.
Applications that create receiver objects under a
context object,
also create the same number of tmon_rcv_t
objects under the corresponding tmon_t object.
<li>/ref tmon_conn_s "tmon_conn_t" - object associated with a
source-to-receiver "connection".
</ul>

\n \subsection clientdatapointers Client Data Pointers

tbd

\n \section monitoringtoolapis Monitoring Tool APIs

tbd

\n \subsection examplemonitoringtool Example Monitoring Tool

The supplied example monitoring tool, "lbmtmon.c", is derived from the
standard UM example monitoring tool,
<a href="https://ultramessaging.github.io/currdoc/doc/example/lbmmon.c">"lbmmon.c"</a>
(one of the
<a href="https://ultramessaging.github.io/currdoc/doc/example/index.html">C example apps</a>).

While the "tmon.c" module is primarily focused on the user's applications,
it also contains a few APIs intended for use by the monitoring tool.
See tmon_create_context() and tmon_create_monrcv().


\n \section limitationsandopportunities  Limitations and Opportunities

<ul>
<li>Because UM automatic monitoring does not give the application access
to the internal monitoring context,
tmon must create its own context.
This adds an additional context and thread to each application.

<li>The simple design of tmon makes it less scalable than a more
complex design could be.
In particular, it may not be suited for applications that create many
thousands of sources or receivers in rapid succession.
A potential enhancement might be a work queue that is rate limited.

<li>Currently, only a C version is available.
Production of Java or .NET versions will depend on demand.

<li>The supplied example monitoring tool just prints the received
events, nothing more.
Many valuable functions could be added.
For example, it could raise alarms if a publisher creates a source but
subscribers for that topic do not discover or connect within a reasonable
amount of time.

<li>There is no query capability.
For example,
if the monitoring tool is not collecting data for a period of time,
perhaps due to network failure,
tmon events reported during that period are lost.
This is not a significant problem for standard UM monitoring data
since it is generally cumulative.
But lost tmon events generally cannot be reconstructed by subsequent
data.
A potential enhancement might be a query to the application's tmon.
It could respond with full lists of sources and receivers and their states.

<li>With wildcard receivers, it is not possible to know what topic is
active when a connection object is created.
It is not until the BOS or EOS event that the topic is known for that
connection.
(With regular receivers, the topic is known when the receiver is created.)
</ul>


\page customization Customization

As mentioned in the \ref overview, Informatica expects that users
will modify the tmon package for their own needs.

\n \section errorhandling Error Handling

Every major software project has its own error handling conventions.
The Ultra Messaging convention,
returning an integer status in every function call,
can lead to significant clutter in the source code.
Since the purpose of this code is to provide an educational example,
the addition of unnecessary clutter works against its goals.

The tmon package relies on a much simpler error handling convention:
printing to "stderr" and invoking a set of macros that print information
useful to the programmer and calling "exit(1)", which terminates the process.
Those macros are:
<ul>
<li>NULLCHK
<li>ASSRT
<li>FAILCHK
<li>LBMCHK
</ul>

It is generally preferable for production-ready applications to NOT exit
the process, but instead to log a warning and maybe disable the topic
monitoring function.
Adding this behavior would not be difficult,
but it would clutter the code, obscuring its design,
and degrading its educational value.

We advise the user to search the source code for "stderr" and the
above macro names.
These are the places where the user's local error handling conventions
would need to be inserted.

\page wireprotocol Wire Protocol

Each message is an ASCII string (not null-terminated).
The first character of a message indicates the type of message.

<pre>
T - tmon_create: T,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,ctx_name
t - tmon_delete: T,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec
R - rcv_create : R,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_rcv,topic_name
r - rcv_delete : r,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_rcv
W - wrcv_create: W,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_rcv,topic_pattern
w - wrcv_delete: w,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_rcv
S - src_create : S,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_src,topic_name
s - src_delete : s,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,tmon_src
C - conn_create: C,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,tmon_rcv,src_str
c - conn_delete: c,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,msg_cnt,loss_cnt,burst_cnt,dgrams_lost
B - BOS        : b,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,topic_name
E - EOS        : e,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,msg_cnt,loss_cnt,burst_cnt,dgrams_lost,topic
L - loss       : L,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,sqn
l - burst_loss : L,app_id,IP,PID,tmon_ctx,tv_sec,tv_usec,conn,sqn,burst_size
</pre>


\page myworkflow My Workflow

I'm Steve Ford, the initial developer of tmon.
I am a Linux-centric C programmer who does not have a lot of experience with
Windows or Mac development.

I have a Mac laptop, my primary workstation, and a Windows laptop,
which I only use when I need to (usually via RDP).
I also use a test lab that contains many servers of various OSes and
versions.
(If you see the hostname "orion" in some of the scripts,
that is the name of a Linux host in our test lab that I commonly use.)

This workflow assumes a full install of UM, including libraries,
binaries, and example application executables.
With Mac and Linux, the "lbm.sh" script sets up PATH and library load
environment variables.
With Windows, PATH is assumed to be set up by the install of UM.

My workflow is as follows:
<ul>
<li>In a dedicated Mac terminal window, run "mac/labbox.sh",
which invokes the "[labbox](https://github.com/fordsfords/labbox)" tool,
which uses "fswatch" and "rsync" to detect changes on my Mac and update
the Linux lab host "Orion".
Note that this tool runs continuously.
<li>Edit source files on Mac. Note that the modified files are automatically
copied to Orion.
<li>Build and test in the "mac" directory using "tst.sh".
<li>In a secure shell window logged into Orion, build and test in the "lin"
directory using "tst.sh".
<li>On my Windows laptop, use Cygwin to run "boxlab.sh" which use "rsync" to
update from Orion.
This script does not automatically detect changes on Orion; I have to
press return after I make a change to get the update.
After synchronizing, the script copies source files into the Visual
Studio project area,
and also updates test files for the host's IP address.
<li>Use Visual Studio to build the solution.
<li>Test in the "win" directory using "tst.sh" (using Cygwin).
</ul>

I'm sure there are better workflows; suggestions are welcome. (-:

Note that most of the scripts in the "win", "lin", and "mac" directories
are specific to my environment
and would require significant rework for you to use.
I suspect it wouldn't be worth it.


\page releasenotes Release Notes


\n \section version0_1 Version 0.1

Initial "alpha" release.

Release Date: ???


\page disclaimers Disclaimers

Copyright (c) 2020 Informatica Corporation. All Rights Reserved.
Permission is granted to licensees to use
or alter this software for any purpose, including commercial applications,
according to the terms laid out in the Software License Agreement.

This source code example is provided by Informatica for educational
and evaluation purposes only.

THE SOFTWARE IS PROVIDED "AS IS" AND INFORMATICA DISCLAIMS ALL WARRANTIES
EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF
NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
PURPOSE.  INFORMATICA DOES NOT WARRANT THAT USE OF THE SOFTWARE WILL BE
UNINTERRUPTED OR ERROR-FREE.  INFORMATICA SHALL NOT, UNDER ANY CIRCUMSTANCES,
BE LIABLE TO LICENSEE FOR LOST PROFITS, CONSEQUENTIAL, INCIDENTAL, SPECIAL OR
INDIRECT DAMAGES ARISING OUT OF OR RELATED TO THIS AGREEMENT OR THE
TRANSACTIONS CONTEMPLATED HEREUNDER, EVEN IF INFORMATICA HAS BEEN APPRISED OF
THE LIKELIHOOD OF SUCH DAMAGES.

*/
